//1. Running in parallel
public async void RunTask()
{
    var employeesTask = Task.Run(GetEmployeeList); 
    var taskSkill = Task.Run(GetEmployeSkills); 
    var tasknotes = Task.Run(GetEmployeeNotes); 
  
    await Task.WhenAll(employeesTask, taskSkill, tasknotes);
 
    var emp = employeesTask.Result;
    var sk = taskSkill.Result;
    var nt = tasknotes.Result;  
  }
  
  /*  Methods */  
  List<Employee> GetEmployeeList(){
    //Demo purpose
    return empList;
  }
 
  List<Skills> GetEmployeSkills(){
    //Demo purpose
    return skills;
  }
  
  List<Notes> GetEmployeeNotes(){
    //Demo purpose
    return notes;
  }
  
  2.  Task in without async method 
  public void RunTask()
  {
     var task1= Task.Run(() => GetEmployeeList(param));
     var task2 = Task.Run(() => GetEmployeSkills(param));
     
     Task.WhenAll(task1, task2).Wait();

    DataSet  ds = task1.Result;
    DataSet ds1= task2.Result;
  }
   
 public async Task<DataSet> GetEmployeeList(parameter para) 
 {
   //DB connection and get data 
   return ds;
 }            
                
                
  3. Other way of calling in parallel 
  
   Task<DataSet> t1 = GetDataset(connection);
   Task<DataSet> t2 = GetDataset(connection);
   await Task.WhenAll(t1, t2);
   DataSet ds = t1.Result;
   DataSe  ds2 = t2.Result;
   
   public async Task<DataSet> GetDataset(connection) 
   {
      //All logic for getting data from DB
       Dataset ds;
       return  ds;
    }
  
  
